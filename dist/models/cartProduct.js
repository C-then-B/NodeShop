"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const database_1 = require("../controllers/database");
const product_1 = require("./product");
const cart_1 = require("./cart");
//@staticImplements<IDatabaseModelStatic>()
class CartProduct {
    constructor(belongsToCart, quantity, createdAt, id) {
        this.createdAt = undefined; // so we can sort by whichever products were added first
        this.product = new product_1.Product('', '', '', 0);
        this.id = id !== undefined ? id : NaN;
        this.createdAt = createdAt !== undefined ? createdAt : undefined;
        this.belongsToCart = belongsToCart;
        this.quantity = quantity;
    }
    static init(databaseController) {
        return __awaiter(this, void 0, void 0, function* () {
            return database_1.DatabaseController.query(`CREATE TABLE IF NOT EXISTS ${CartProduct.tableName}(
          id INT NOT NULL UNIQUE GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
          belongsToCart INT NOT NULL REFERENCES ${cart_1.Cart.tableName}(id) ON DELETE CASCADE ON UPDATE CASCADE,
          productID INT NOT NULL REFERENCES ${product_1.Product.tableName}(id) ON DELETE CASCADE ON UPDATE CASCADE,
          quantity INT NOT NULL,
          updatedAt TIMESTAMPTZ NOT NULL,
          createdAt TIMESTAMPTZ NOT NULL
        )`);
        });
    }
    setup(productID) {
        return __awaiter(this, void 0, void 0, function* () {
            return product_1.Product.findByID(productID).then(product => (this.product = product));
        });
    }
    save() {
        return __awaiter(this, void 0, void 0, function* () {
            // Does the cartItem exist in the app
            let result = !isNaN(this.id);
            // Even if so, does it for some reason not exist in the DB?
            // Maybe someone manually inserted a faulty ID into the URL
            if (result) {
                yield database_1.DatabaseController
                    .query(`SELECT EXISTS(select 1 from ${product_1.Product.tableName} where id=$1)`, [this.product.id])
                    .then(res => {
                    result = res.rows[0].exists;
                });
            }
            const now = new Date();
            if (!result) {
                return new Promise(res => {
                    database_1.DatabaseController.query(`INSERT INTO ${CartProduct.tableName} (belongsToCart, productID, quantity, updatedAt, createdAt) VALUES ($1, $2, $3, $4, $4) RETURNING *`, [this.belongsToCart, this.product.id, this.quantity, now]).then(result => {
                        this.id = result.rows[0].id;
                        res(result);
                    });
                });
            }
            else {
                return database_1.DatabaseController.query(`UPDATE ${CartProduct.tableName} SET quantity=$1, updatedAt=$2 WHERE id=$3`, [this.quantity, now, this.id]);
            }
        });
    }
    delete() {
        return database_1.DatabaseController.query(`DELETE FROM ${CartProduct.tableName} WHERE id=$1`, [
            this.id
        ]);
    }
    modifyQuantity(newQuantity) {
        return new Promise((resolve) => __awaiter(this, void 0, void 0, function* () {
            if (newQuantity === 0) {
                yield this.delete();
            }
            else {
                this.quantity = newQuantity;
                yield this.save();
            }
            resolve();
        }));
    }
    static fetchAllBelongingToCart(cartID) {
        return new Promise(resolve => {
            database_1.DatabaseController.query(`SELECT * FROM ${CartProduct.tableName} WHERE belongsToCart=$1`, [cartID])
                .then((result) => __awaiter(this, void 0, void 0, function* () {
                const cartProducts = [];
                for (const row of result.rows) {
                    yield this.createInstanceFromDB(row).then(result => {
                        cartProducts.push(result);
                    });
                }
                resolve(cartProducts);
            }))
                .catch(err => console.log(err));
        });
    }
    static createInstanceFromDB(dbProduct) {
        return __awaiter(this, void 0, void 0, function* () {
            if (dbProduct === undefined) {
                return undefined;
            }
            const cartProduct = new CartProduct(dbProduct.belongsToCart, dbProduct.quantity, dbProduct.createdat, // so we can sort by whichever products were added first
            dbProduct.id);
            yield cartProduct.setup(dbProduct.productid);
            return cartProduct;
        });
    }
}
exports.CartProduct = CartProduct;
CartProduct.tableName = 'CartProducts';
//# sourceMappingURL=cartProduct.js.map