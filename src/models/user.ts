import { staticImplements } from '../util/staticImplements';
import {
  IDatabaseModel,
  IDatabaseModelStatic
} from '../interfaces/IDatabaseModel';

import { DatabaseController as db } from '../controllers/database';
import { QueryResult } from 'pg';

@staticImplements<IDatabaseModelStatic>()
class User implements IDatabaseModel {
  id: number;
  name: string;
  email: string;

  static tableName = 'Users';

  constructor(name: string, email: string, id?: number) {
    this.id = id !== undefined ? id : NaN;
    this.name = name;
    this.email = email;
  }

  static async init(databaseController: db): Promise<QueryResult> {
    return db.query(
      `CREATE TABLE IF NOT EXISTS ${User.tableName}(
          id INT NOT NULL UNIQUE GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
          name VARCHAR(255) NOT NULL,
          email VARCHAR(255) NOT NULL,
          updatedAt TIMESTAMPTZ NOT NULL,
          createdAt TIMESTAMPTZ NOT NULL
        )`
    );
  }

  static createGuest = (): Promise<User> => {
    return new Promise<User>(resolve => {
      const user = new User('Guest', 'Guest@guest');
      user.save().then(() => {
        resolve(user);
      });
    });
  };

  testme() {
    return this.email;
  }

  async save(): Promise<QueryResult> {
    // Does the user exist in the app
    let result = !isNaN(this.id);

    // Even if so, does it for some reason not exist in the DB?
    // Maybe someone manually inserted a faulty ID into the URL
    if (result) {
      await db
        .query(`SELECT EXISTS(select 1 from ${User.tableName} where id=$1)`, [
          this.id
        ])
        .then(res => {
          result = res.rows[0].exists;
        });
    }

    const now = new Date();
    if (!result) {
      return new Promise<QueryResult<any>>(res => {
        db.query(
          `INSERT INTO ${User.tableName} (name, email, updatedAt, createdAt) VALUES ($1, $2, $3, $3) RETURNING *`,
          [this.name, this.email, now]
        ).then(result => {
          this.id = result.rows[0].id;
          res(result);
        });
      });
    } else {
      return db.query(
        `UPDATE ${User.tableName} SET name=$1, email=$2, updatedAt=$3 WHERE id=$4`,
        [this.name, this.email, now, this.id]
      );
    }
  }

  delete(): Promise<QueryResult> {
    return db.query(`DELETE FROM ${User.tableName} WHERE id=$1`, [this.id]);
  }

  static fetchAll(): Promise<User[]> {
    return new Promise<User[]>(resolve => {
      db.query(`SELECT * FROM ${User.tableName}`)
        .then(result => {
          let users: User[] = [];
          for (const row of result.rows) {
            users.push(this.createInstanceFromDB(row)!);
          }
          resolve(users);
        })
        .catch(err => console.log(err));
    });
  }

  static findByID(id: number): Promise<User> {
    return new Promise<any>(resolve => {
      db.query(`SELECT * FROM ${User.tableName} WHERE id=$1`, [id])
        .then(result => {
          resolve(this.createInstanceFromDB(result.rows[0]));
        })
        .catch(err => console.log(err));
    });
  }

  static createInstanceFromDB(dbProduct: any): User | undefined {
    if (dbProduct === undefined) {
      return undefined;
    }

    return new User(dbProduct.name, dbProduct.email, dbProduct.id);
  }
}

export { User };
